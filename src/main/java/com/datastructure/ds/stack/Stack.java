package com.datastructure.ds.stack;

import java.util.HashSet;

/**
 * @author : tianyu.wang
 * create at:  2021/1/26  2:32 下午
 * @description:
 * 1.比如我们在放盘子的时候都是从下往上一个个放，
 * 拿的时候是从上往下一个个的那，不能从中间抽，这种其实就是一个典型的栈型数据结构。
 * 后进先出即Last In First Out （LIFO）。
 *
 *
 * 2.栈如何实现
 * 其实它是一个限定仅在表尾进行插入和删除操作的线性表。
 * 这一端被称为栈顶，相对地，把另一端称为栈底。
 * 向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，
 * 使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，
 * 它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。
 * 栈其实就是一个特殊的链表或者数组。
 * 既然栈也是一个线性表，那么我们肯定会想到数组和链表，
 * 而且栈还有这么多限制，那为什么我们还要使用这个数据结构呢？
 * 不如直接使用数组和链表来的更直接么？
 * 数组和链表暴露太多的接口，实现上更灵活了，
 * 有些技术理解不到位的人员就可能出错。所以在某些特定场景下最好是选择栈这个数据结构。
 */
public interface Stack<Item> {


    //入栈
    Stack<Item> push(Item item);

    //出栈
    Item pop();

    //大小
    int size();

    //查看栈顶元素（不弹栈）
    public Item peek();

    boolean isEmpty();

}
